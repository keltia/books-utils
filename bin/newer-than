#! /usr/bin/env ruby
#
# @abstract extract books newer than given date from Calibre catalog
# @author Ollivier Robert <roberto@keltia.net>
# @copyright 2014 by Ollivier Robert
#
# XXX Uses calibredb to extract most data
#
# REQUIRES: command-line Calibre utilities to be installed
# REQUIRES: at least the 'added' custom column (see #added: in the request)
#
# Our name
MYNAME = File.basename($0)

$LOAD_PATH.unshift(File.join(__dir__, File.expand_path($0), '..', 'lib'))

# Standard modules
#
require 'csv'
require 'optparse'
require 'time'
require 'tmpdir'
require 'yaml'

# Non-standard modules
#
require 'oj'
require 'ox'
require 'pastebin'

# My modules
#
require 'books/utils/version'

# On day in seconds
ONEDAY = (3600*24)

# Path to the tmp file for results
TMPDIR = ".newer-than"

# Check threshold
#
# @param [String|Fixnum] value threshold value to be checked
# @return [Time] precise time to checked upon
def check_threshold(threshold, that_date)
  # Check options
  #
  if threshold != 0 and that_date != nil
    $stderr.puts('Error: you can not specify both -d and -t!')
    return 255
  end

  # How did we specified the threshold?
  #
  if that_date.nil?
    newer_than = Time.at(Time.now.to_i - (threshold * ONEDAY))
  else
    #
    # If ALL is specified, get everything from the library with a date
    # old enough
    #
    if that_date == 'ALL'
      that_date = '1970-01-01'
    end
    newer_than = Time.parse(that_date)
  end
  newer_than.iso8601
end

# Get list
#
# @param [Fixnum] threshold number of days to check books for
# @return [Array] list of books id in CSV
def get_list(threshold, library_path = nil)
  book_list = nil
  raw_list  = nil

  # Wrap the temp directory
  #
  Dir.mktmpdir(TMPDIR) do |dir|

    # Use calibredb to fetch data
    #
    if library_path.nil?
      ret = %x{calibredb catalog #{dir}/calibre.csv -s '#added:>=#{threshold}' --fields 'title,authors,series,series_index' --sort-by 'authors'}
    else
      ret = %x{calibredb catalog #{dir}/calibre.csv -s '#added:>=#{threshold}' --with-library=#{library_path} --fields 'title,authors,series,series_index' --sort-by 'authors'}
    end

    if FileTest.exists?(File.join(dir, 'calibre.csv'))
      # XXX Hack to remove the fscking BOM
      #
      rest = 0
      File.open("#{dir}/calibre.csv", 'r', encoding: 'UTF-8') do |fr|
        bom = fr.seek(3)
        rest = fr.read
        raw_list = CSV.parse(rest, converters: :numeric)
      end
    else
      $stderr.puts("Something went wrong, no csv generated")
      nil
    end
  end

  # Turn this raw array of arrays into something usable
  #
  header_list = raw_list.shift
  book_list = raw_list.inject([]) {|list, e|
    he = Hash.new
    header_list.map {|h| he[h] = e[header_list.index(h)]}
    list << he
  }
end

# Output results in the desired format
#
# @param [Array] list    all the results
# @param [String] format use the specified format (default is plain display)
# @return [String] result
def format_results(list, newer_than, format = nil)
  out = ''
  case format
    when /json/
      out = Oj.dump(list)
    when /xml/
      out = Ox.dump(list, :effort => :tolerant)
    when /yaml/
      out = list.to_yaml
    else
      out = "#{list.length} new/updated books since #{newer_than}:\n\n"
      list.each do |bk|
         series = bk['series']
         if series == ''
           title = bk['title']
         else
           title = "#{bk['title']} (#{series}, ##{bk['series_index']})"
         end
         out += "Authors: %-25s\tTitle: %s\n" % [bk['authors'], title]
      end
  end
  out
end

# Sends the result string to pastebin.com as a private paste
#
# @param [String] str code yo want to send
# @param [String] newer_than Use this date to generate the paste's title
# @return [String] URL from Pastebin#paste
def send_pastebin(str, newer_than)
  options = {}
  url = ''

  Dir.mktmpdir(TMPDIR) do |dir|
    Dir.chdir(dir) do
      fname = 'tmp-pastebin.txt'
      File.open(fname, 'w') do |fh|
        fh.puts(str)
      end
      options['api_paste_code'] = fname
      options['api_paste_name'] = "New/updated books since #{newer_than}"
      options['api_paste_private'] = 1
      options['api_paste_expire_date'] = '1W'
      url = Pastebin.new(options).paste
    end
  end
  url
end

# Main method
#
# @param [Array] argv parameters
# @return [FixNum] exit code
def main(argv)
  # time_t time
  that_date = nil

  # text-based threshold for SQL
  threshold = 0

  # output format
  format = nil

  # Library path
  library_path = nil

  # Send to pastebin directly?
  do_pastebin = false

  # Display results?
  be_quiet = false

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-h] [-D path] [-f format] [-d DATE | -t DAYS]

Default is 1 day.  Default format is space-delimited.
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME} v#{Books::Utils::VERSION}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner
    opts.on('-D', '--library=DIR', 'Use that library path instead of the default.') do
      |opt_dir|
      library_path = opt_dir
    end
    opts.on('-P', '--pastebin', 'Post directly to pastebin.') do
      |opt_pastebin|
      do_pastebin = true
    end
    opts.on('-d', '--since=DATE', 'Use that date to search after') do
      |opt_date|
      that_date = opt_date
    end
    opts.on('-f', '--format=json|yaml|xml', 'Specify output format') do
      |opt_format|
      if opt_format !~ %r{json|yaml|xml}
        $stderr.puts("Error: invalid format #{opt_format}, use json|xml|yaml!")
        return 1
      end
      format = opt_format
    end
    opts.on('-q', '--quiet', 'Do not display the result (generally with -P).') do
      |opt_quiet|
      be_quiet = true
    end
    opts.on('-t', '--newer-than=DAYS', 'Threshold date to look for') do
      |opt_newer|
      threshold = opt_newer.to_i
    end
    opts.on('-h', '--help', 'Display this usage') do
      puts opts.help
      return 255
    end
    opts.parse!
  end

  argv.options = nil

  # Manage options
  #
  newer_than = check_threshold(threshold, that_date)

  # Do the stuff
  #
  list = get_list(newer_than, library_path)

  # Convert/display results
  #
  unless list.nil?
    str = format_results(list, newer_than, format)
    unless be_quiet
      puts(str)
    end
    if do_pastebin
      puts(send_pastebin(str, newer_than))
    end
  end
  0
end

exit(main(ARGV) || 1)
