#! /usr/bin/env ruby
#
# @abstract extract books newer than given date from Calibre catalog
# @author Ollivier Robert <roberto@keltia.net>
# @copyright 2014 by Ollivier Robert
#
# XXX Uses calibredb to extract most data
#
# REQUIRES: command-line Calibre utilities to be installed

# Our name
MYNAME = File.basename($0)

$LOAD_PATH.unshift(File.join(File.dirname(File.expand_path($0)), '..', 'lib'))

# Standard modules
#
require 'csv'
require 'optparse'
require 'time'
require 'tmpdir'
require 'yaml'

# Non-standard modules
#
require 'oj'
require 'ox'

# My modules
#
require 'books/utils/version'

# On day in seconds
ONEDAY = (3600*24)

# Path to the tmp file for results
TMPDIR = ".newer-than"

# Default ERB template
DEF_TMPL = <<-'EOT'
<% list.each do |bk| %>
Authors: <%= bk["authors"] %> - Series: <%= bk['series'] %> - Title: <%= bk['title'] %>
<% end %>
EOT

# Check threshold
#
# @param [String|Fixnum] value threshold value to be checked
# @return [Time] precise time to checked upon
def check_threshold(threshold, that_date)
  # Check options
  #
  if threshold != 0 and that_date != nil
    $stderr.puts('Error: you can not specify both -d and -t!')
    return 255
  end

  # How did we specified the threshold?
  #
  if that_date.nil?
    newer_than = Time.at(Time.now.to_i - (threshold * ONEDAY))
  else
    newer_than = Time.parse(that_date)
  end
end

# Get list
#
# @param [Fixnum] threshold number of days to check books for
# @return [Array] list of books id in CSV
def get_list(threshold)
  book_list = nil
  raw_list  = nil

  # Wrap the temp directory
  #
  Dir.mktmpdir(TMPDIR) do |dir|

    # Use calibredb to fetch data
    #
    ret = %x{calibredb catalog #{dir}/calibre.csv -s 'date:>=#{threshold}' --fields 'title,authors,series' --sort-by 'authors'}

    # XXX Hack to remove the fscking BOM
    #
    File.open("#{dir}/booklist.csv", "w", encoding: "UTF-8") do |fh|
      rest = 0
      File.open("#{dir}/calibre.csv") do |fr|
        bom = fr.seek(3)
        rest = fr.read
      end
      fh.print(rest)
    end
    # Read back the file
    #
    raw_list = CSV.read("#{dir}/booklist.csv", encoding: "UTF-8", converters: :numeric)
  end

  # Turn this raw array of arrays into something usable
  #
  header_list = raw_list.shift
  book_list = raw_list.inject([]) {|list, e|
    he = Hash.new
    header_list.map {|h| he[h] = e[header_list.index(h)]}
    list << he
  }
  book_list
end

# Output results in the desired format
#
# @param [Array] list    all the results
# @param [String] format use the specified format (default is plain display)
def output_results(list, format = nil)
    case format
      when /json/
        puts Oj.dump(list)
      when /xml/
        puts Ox.dump(list, :effort => :tolerant)
      when /yaml/
        puts list.to_yaml
      else
      #
      # By default use an ERB template
      #
      require 'erb'

      #begin
      erb = ERB.new(DEF_TMPL, 0, '<>')
      puts erb.run(binding)
      #rescue => msg
      #  $stderr.puts("Error: #{msg}")
      #end
    end
end

# Main method
#
# @param [Array] argv parameters
# @return [FixNum] exit code

def main(argv)
  # time_t time
  that_date = nil

  # text-based threshold for SQL
  threshold = 0

  # output format
  format = nil

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-h] [-D DIR] [-d DATE|-t DAYS]

Default is 1 day.
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME} v#{Books::Utils::VERSION}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner
    opts.on('-D', '--calibre-dir=DIR', 'Where to find Calibre data') do
      |opt_calibre|
      calibre_dir = opt_calibre
    end
    opts.on('-d', '--newer-than=DATE', 'Use that date to search after') do
      |opt_date|
      that_date = opt_date
    end
    opts.on('-f', '--format=json|yaml|xml') do
      |opt_format|
      if opt_format !~ %r{json|yaml|xml}
        $stderr.puts("Error: invalid format #{opt_format}, use json|xml|yaml!")
        return 1
      end
      format = opt_format
    end
    opts.on('-t', '--newer-than=DATE', 'Threshold date to look for') do
      |opt_newer|
      threshold = opt_newer.to_i
    end
    opts.on('-h', 'Help', 'Display this usage') do
      puts banner
      return 255
    end
    opts.parse!
  end

  argv.options = nil

  # Manage options
  #
  newer_than = check_threshold(threshold, that_date)

  # Do the stuff
  #
  list = get_list(newer_than.iso8601)

  # Convert/display results
  #
  output_results(list, format)
  0
end

if __FILE__ == $0
  exit(main(ARGV) || 1)
end
