#! /usr/bin/env ruby
#
# @abstract extract books newer than given date from Calibre catalog
# @author Ollivier Robert <roberto@keltia.net>
# @copyright 2014 by Ollivier Robert
#
# XXX Uses calibredb to extract most data
#
# REQUIRES: command-line Calibre utilities to be installed
# REQUIRES: at least the 'added' custom column (see #added: in the request)
#
# Our name
MYNAME = File.basename($0)

$LOAD_PATH.unshift(File.join(__dir__, File.expand_path($0), '..', 'lib'))

# Standard modules
#
require 'csv'
require 'optparse'
require 'rss'
require 'time'
require 'tmpdir'

# Non-standard modules
#
require 'oj'
require 'ox'
require 'pastebin'
require 'toml'
require 'zip'

# My modules
#
require 'books/utils/version'

# On day in seconds
ONEDAY = (3600*24)

# Path to the tmp file for results
TMPDIR = ".#{MYNAME}"

# Name of the RSS file
RSSFILE = 'rss.xml'

# Config file
RCFILE = File.join(ENV['HOME'], '.books-utils', 'config.toml')

# Read config
#
# @param [String] path path to the configuration file
# @return [Hash] hash of values
def read_config(path = RCFILE)
  config = nil
  begin
    if File.exist?(path)
      config = TOML.load_file(path)
    end
  rescue => msg
    $stderr.puts("Error: #{path} not found.")
    exit 1
  end
  config
end

# Check threshold
#
# @param [String|Fixnum] value threshold value to be checked
# @return [Time] precise time to checked upon
def check_threshold(threshold, that_date)
  # Check options
  #
  if threshold != 0 and that_date != nil
    $stderr.puts('Error: you can not specify both -d and -t!')
    return 255
  end

  # How did we specified the threshold?
  #
  if that_date.nil?
    newer_than = Time.at(Time.now.to_i - (threshold * ONEDAY))
  else
    #
    # If ALL is specified, get everything from the library with a date
    # old enough
    #
    if that_date == 'ALL'
      that_date = '1970-01-01'
    end
    newer_than = Time.parse(that_date)
  end
  newer_than.iso8601
end

# Arrange results
#
# Turn the raw array of arrays into something we can use later
#
# @param [Array] list all new books
# @return [Array] array of hashes
def arrange_results(raw_list)
  # Turn this raw array of arrays into something usable
  #
  header_list = raw_list.shift
  book_list = raw_list.inject([]) {|list, e|
    he = Hash.new
    header_list.map {|h|
      he[h] = e[header_list.index(h)]
    }
    list << he
  }
  book_list
end

# Get list
#
# @param [Fixnum] threshold number of days to check books for
# @return [Array] list of books id in CSV
def get_list(threshold, library_path = nil)
  list = nil
  raw_list  = nil

  # Wrap the temp directory
  #
  Dir.mktmpdir(TMPDIR) do |dir|

    request = "'#added:>=#{threshold} or date:>=#{threshold}'"
    fields = '"title,authors,series,series_index,library_name,cover"'
    opts = '--dont-notify-gui'

    # Use calibredb to fetch data
    #
    if library_path.nil?
      ret = %x{calibredb catalog #{dir}/calibre.csv -s #{request} --fields #{fields} --sort-by 'authors' #{opts}}
    else
      ret = %x{calibredb catalog #{dir}/calibre.csv -s #{request} --with-library=#{library_path} --fields #{fields} --sort-by 'authors' #{opts}}
    end

    if FileTest.exists?(File.join(dir, 'calibre.csv'))
      # XXX Hack to remove the fscking BOM
      #
      rest = 0
      File.open("#{dir}/calibre.csv", 'r', encoding: 'UTF-8') do |fr|
        bom = fr.seek(3)
        rest = fr.read
        raw_list = CSV.parse(rest)
      end
    else
      $stderr.puts("Something went wrong, no csv generated")
      return nil
    end
  end

  list = arrange_results(raw_list)
  if list.nil?
    $stderr.puts("Error: list is nil, here is raw_list:")
    $stderr.puts(raw_list)
    exit 2
  end

  # raw_list is [] so list is empty
  if list[0].nil?
    return nil
  end

  # Extract some other info
  #
  @library_name = list[0]['library_name'].dup
  cover = list[0]['cover'].dup
  @library_path = File.join((cover.split("/#{@library_name}/"))[0], @library_name)

  list
end

# Generate an RSS feed
#
# @param [Array] list   all the results
# @param [String] descr string to describe the feed
# @return [String] the generated RSS file
def make_rss(list, descr)
  out = ''
  my_time = Time.now.to_s

  out = RSS::Maker.make('atom') do |feed|
    feed.channel.author = @config[MYNAME]['author']
    feed.channel.updated = my_time
    feed.channel.about = @config[MYNAME]['rss']
    feed.channel.title = @config[MYNAME]['title']

    list.each_with_index do |book, idx|
      series = book['series']
      if series == ''
        title = book['title']
      else
        title = "#{book['title']} (#{series}, ##{book['series_index']})"
      end

      feed.items.new_item do |item|
        item.id = idx.to_s
        item.author = book['authors']
        item.link = @config[MYNAME]['where_uri']
        item.title = title
        item.updated = my_time
      end
    end
  end
  out
end

# Output results in the desired format
#
# @param [Array] list    all the results
# @param [String] format use the specified format (default is plain display)
# @return [String] result
def format_results(list, newer_than, format = nil)
  # Output
  out = ''

  # Filter out the cover field which is entirely local
  final = list.dup.map {|bk| bk.delete('cover'); bk }

  str_newer = newer_than.to_s.split(%r{T})[0]
  out = "#{final.length} new/updated books since #{str_newer}:\n\n"
  case format
    when /json/
      out = Oj.dump(final)
    when /xml/
      out = Ox.dump(final, :effort => :tolerant)
    when /yaml/
      out = final.to_yaml
    when /rss/
      out = make_rss(final, out)
    else
      # Remove the date part after the T (timezone and hours)
      #
      final.each do |bk|
         series = bk['series']
         if series == ''
           title = bk['title']
         else
           title = "#{bk['title']} (#{series}, ##{bk['series_index']})"
         end
         out += "Authors: %-25.25s\tTitle: %s\n" % [bk['authors'], title]
      end
  end
  out
end

# Build a zipfile with all new files in it
#
# @param [String] list of new books
# @param [String] newer_than threshold date
# @param [String] zipdir directory to put the .zip into
# @return [String] path of the zip file
def zipfile(list, newer_than, zipdir = '/tmp')

  str_newer = newer_than.to_s.split(%r{T})[0]

  zipfile_fn = File.join(zipdir, "calibre-#{str_newer}.zip")
  if File.exists?(zipfile_fn)
    File.unlink(zipfile_fn)
  end

  # Write the output zip
  #
  Dir.chdir(@library_path) do

    Zip.continue_on_exists_proc = true
    Zip.sort_entries = true
    Zip.unicode_names = true
    #
    # Try to avoid registering local paths
    #
    begin
      Zip::File.open(zipfile_fn, Zip::File::CREATE) do |zfh|
        #
        # For each book, gather the list of files
        #
        list.each do |bk|
          authr_base = bk['authors'].split(/,/)[0]
          all_files = File.join(authr_base, "#{bk['title']}*", '*')
          begin
            Dir[all_files].sort.each do |file|
              zfh.add(file, file)
            end
          rescue => msg
            $stderr.puts("Error: #{msg} : #{full} : #{file}")
          end
        end # -- list
      end # -- Zip::File
    rescue => msg
      $stderr.puts("Error creating zip: #{msg}")
    end
  end # -- chdir
  zipfile_fn
end

# Sends the result string to pastebin.com as a private paste
#
# @param [String] str code yo want to send
# @param [String] newer_than Use this date to generate the paste's title
# @return [String] URL from Pastebin#paste
def send_pastebin(str, newer_than)
  options = {}
  url = ''

  Dir.mktmpdir(TMPDIR) do |dir|
    Dir.chdir(dir) do
      fname = 'tmp-pastebin.txt'
      File.open(fname, 'w') do |fh|
        fh.puts(str)
      end
      options['api_paste_code'] = fname
      options['api_paste_name'] = "New/updated books since #{newer_than}"
      options['api_paste_private'] = 1
      options['api_paste_expire_date'] = '1W'
      url = Pastebin.new(options).paste
    end
  end
  url
end

# Main method
#
# @param [Array] argv parameters
# @return [FixNum] exit code
def main(argv)
  # time_t time
  that_date = nil

  # text-based threshold for SQL
  threshold = 0

  # output format
  format = nil

  # Library path
  library_path = nil

  # Send to pastebin directly?
  do_pastebin = false

  # Display results?
  be_quiet = false

  # Optional Zip file
  do_zipfile = false

  # Default dest for zip file
  zipdir = '/tmp'

  # config file
  rcfile = RCFILE

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-hqvPZ] [-D path] [-c RCFILE] [-f format] [-o DIR] [-d DATE | -t DAYS]

Default is 1 day.  Default format is space-delimited.
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME} v#{Books::Utils::VERSION}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner
    opts.on('-D', '--library=DIR', 'Use that library path instead of the default.') do
      |opt_dir|
      library_path = opt_dir
    end
    opts.on('-P', '--pastebin', 'Post directly to pastebin.') do
      |opt_pastebin|
      do_pastebin = true
    end
    opts.on('-Z', '--zip', 'Generate a zip file with the new files.') do
      |opt_zip|
      do_zipfile = true
    end
    opts.on('-c', '--config-file=FILE',"Specify a configuration file, default is #{rcfile}") do
      |opt_config|
      rcfile = opt_config
    end
    opts.on('-d', '--since=DATE', 'Use that date to search after') do
      |opt_date|
      that_date = opt_date
    end
    opts.on('-f', '--format=json|yaml|rss|xml', 'Specify output format') do
      |opt_format|
      if opt_format !~ %r{json|yaml|rss|xml}
        $stderr.puts("Error: invalid format #{opt_format}, use json|xml|yaml|rss!")
        return 1
      end
      format = opt_format
    end
    opts.on('-o', '--output-dir=DIR', 'Set output dir for -Z, default is ".".') do
      |opt_output|
      zipdir = opt_output
    end
    opts.on('-q', '--quiet', 'Do not display the result (generally with -P).') do
      |opt_quiet|
      be_quiet = true
    end
    opts.on('-t', '--newer-than=DAYS', 'Threshold date to look for') do
      |opt_newer|
      threshold = opt_newer.to_i
    end
    opts.on('-h', '--help', 'Display this usage') do
      puts opts.help
      return 255
    end
    opts.parse!
  end

  argv.options = nil

  # Read default options
  #
  @config = read_config(rcfile)
  if @config.nil?
    $stderr.puts("Error: Missing data in #{rcfile}: #{@config}")
    exit 2
  end

  # Manage options
  #
  newer_than = check_threshold(threshold, that_date)

  # Do the stuff
  #
  list = get_list(newer_than, library_path)

  # Convert/display results
  #
  unless list.nil?
    str = format_results(list, newer_than, format)
    unless be_quiet
      puts(str)
    end

    # Options
    #
    # -P
    if do_pastebin
      puts(send_pastebin(str, newer_than))
    end

    # -f rss
    if format == 'rss'
      File.open("/tmp/#{RSSFILE}", "w+") do |fh|
        fh.puts(str)
      end
      puts("RSS file is in /tmp/#{RSSFILE}")
    end
    # -Z
    if do_zipfile
      path = zipfile(list, newer_than, zipdir)
      size = File.stat(path).size / 1024
      puts("Zip file is %s (%d KB)" % [path, size])
    end
  end
  0
end

exit(main(ARGV) || 1)
