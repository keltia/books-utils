#! /usr/bin/env ruby
#
# @abstract extract books newer than given date from Calibre catalog
# @author Ollivier Robert <roberto@keltia.net>
# @copyright 2014 by Ollivier Robert

# Our name
MYNAME = File.basename($0)

$LOAD_PATH.unshift(File.join(File.dirname(File.expand_path($0)), '..', 'lib'))

# Standard modules
#
require 'optparse'
require 'time'

# Non-standard modules
#
require 'sqlite3'
require 'oj'

# My modules
#
require 'books/utils/version'

# SQL queries
#
# XXX specific to my catalog's schema with added column "Added on".
# "timestamp" column may be an adequate substitute
#
NEWER = <<-'EOQ'
select books.id as bid, custom_column_1.value as v
from books, custom_column_1
where v >= ? and bid = custom_column_1.book
order by v;
EOQ

# Query to display books data
#
BOOK_LIST = <<-'EOQ'
select id, title, authors, series
from meta
where id = ?
order by authors;
EOQ

# Main variables
#
# Catalog name
CATALOG = 'metadata.db'
# Calibre directory
CALIBRE = File.join(ENV['HOME'], 'Documents', 'Perso', 'e-Books')
# On day in seconds
ONEDAY = (3600*24)

# Connect to DB
#
# @param [String] path filename of the Calibre database
# @return [SQLite3::Database] handle to the database
def open_db(path)
  begin
    db = SQLite3::Database.new(path)
  rescue => msg
    raise(msg)
  end
  db
end

# Check threshold
#
# @param [String|Fixnum] value threshold value to be checked
# @return [Time] precise time to checked upon
def check_threshold(threshold, that_date)
  # Check options
  #
  if threshold != 0 and that_date != nil
    $stderr.puts('Error: you can not specify both -d and -t!')
    return 255
  end

  # How did we specified the threshold?
  #
  if that_date.nil?
    newer_than = Time.at(Time.now.to_i - (threshold * ONEDAY))
  else
    newer_than = Time.parse(that_date)
  end
end

# Get list
#
# @param [SQLite3::Database] handle to the database
# @param [Fixnum] threshold number of days to check books for
# @return [Array] list of books
def get_list(db, threshold)
  db.execute(NEWER, [threshold])
end

# Output results in the desired format
#
# @param [Array] list    all the results
# @param [String] format use the specified format (default is plain display)
def output_results(list, format)
  if format
    case format
      when /json/
        puts Oj.dump(list)
      when /xml/
        puts Ox.dump(list, :effort => :tolerant)
      else
        puts list
    end
  else
    puts list
  end
end

# Main method
#
# @param [Array] argv parameters
# @return [FixNum] exit code

def main(argv)
  # time_t time
  that_date = nil

  # text-based threshold for SQL
  threshold = 0

  # output format
  format = nil

  # Default location
  calibre_dir = CALIBRE

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-h] [-D DIR] [-d DATE|-t DAYS]

Default is 1 day.
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME} v#{Books::Utils::VERSION}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner
    opts.on('-D', '--calibre-dir=DIR', 'Where to find Calibre data') do
      |opt_calibre|
      calibre_dir = opt_calibre
    end
    opts.on('-d', '--newer-than=DATE', 'Use that date to search after') do
      |opt_date|
      that_date = opt_date
    end
    opts.on('-f', '--format=json|yaml|xml') do
      |opt_format|
      if opt_format !~ %r{json|yaml|xml}
        $stderr.puts("Error: invalid format #{opt_format}, use json|xml|yaml!")
        return 1
      end
      format = opt_format
    end
    opts.on('-t', '--newer-than=DATE', 'Threshold date to look for') do
      |opt_newer|
      threshold = opt_newer.to_i
    end
    opts.on('-h', 'Help', 'Display this usage') do
      puts banner
      return 255
    end
    opts.parse!
  end

  argv.options = nil

  # Manage options
  #
  newer_than = check_threshold(threshold, that_date)

  # Do the stuff
  #
  db = open_db(File.join(calibre_dir, CATALOG))
  list = get_list(db, newer_than.iso8601)

  # Convert/display results
  #
  output_results(list, format)
  0
end

if __FILE__ == $0
  exit(main(ARGV) || 1)
end
